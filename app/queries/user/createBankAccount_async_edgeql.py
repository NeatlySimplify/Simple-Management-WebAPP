# AUTOGENERATED FROM 'app/queries/createBankAccount.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class createBankAccountResult(NoPydanticValidation):
    id: uuid.UUID


async def createBankAccount(
    executor: edgedb.AsyncIOExecutor,
    *,
    user: uuid.UUID,
    bankName: str,
    agency: str,
    accountNumber: str,
    balance: float,
    account_type: str,
) -> createBankAccountResult | None:
    return await executor.query_single(
        """\
        with user := (select User filter .id = <uuid>$user),
        update user set {
            account += (insert BankAccount {
                    bankName := <str>$bankName,
                    agency := <str>$agency,
                    accountNumber := <str>$accountNumber,
                    balance := <float32>$balance,
                    accountType:= <str>$account_type
                }
            )
        };\
        """,
        user=user,
        bankName=bankName,
        agency=agency,
        accountNumber=accountNumber,
        balance=balance,
        account_type=account_type,
    )
