# AUTOGENERATED FROM 'app/queries/updateClient.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class updateClientResult(NoPydanticValidation):
    id: uuid.UUID


async def updateClient(
    executor: edgedb.AsyncIOExecutor,
    *,
    email: str,
    name: str,
    relationship: str,
    govt_id: str,
    sex: str,
    details: str,
    type_client: str,
    birth: datetime.datetime,
    custom_fields: list[str],
    id: uuid.UUID,
) -> updateClientResult | None:
    return await executor.query_single(
        """\
        update Client filter .id = <uuid>$id set {
            email := <str>$email ?? .email,
            name := <str>$name ?? .name,
            relationship := <str>$relationship ?? .relationship,
            govt_id := <str>$govt_id ?? .govt_id,
            sex := <str>$sex ?? .sex,
            details := <str>$details ?? .details,
            type_client := <str>$type_client ?? .type_client,
            birth := <datetime>$birth ?? .birth,
            custom_fields := <array<json>>$custom_fields ?? .custom_fields,
        }\
        """,
        email=email,
        name=name,
        relationship=relationship,
        govt_id=govt_id,
        sex=sex,
        details=details,
        type_client=type_client,
        birth=birth,
        custom_fields=custom_fields,
        id=id,
    )
