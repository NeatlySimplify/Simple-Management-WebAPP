# AUTOGENERATED FROM 'app/queries/getBalance.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class getBalanceResult(NoPydanticValidation):
    id: uuid.UUID
    accounts: getBalanceResultAccounts | None
    total: float


@dataclasses.dataclass
class getBalanceResultAccounts(NoPydanticValidation):
    id: uuid.UUID


async def getBalance(
    executor: edgedb.AsyncIOExecutor,
    *,
    user_id: uuid.UUID,
) -> getBalanceResult:
    return await executor.query_single(
        """\
        with bank_accounts := (
                select User.account {
                bankName,
                balance
            } filter .id = <uuid>$user_id
        ),
        total_sum := (sum(bank_accounts.balance))
        select {
            accounts := bank_accounts,
            total := total_sum
        }\
        """,
        user_id=user_id,
    )
