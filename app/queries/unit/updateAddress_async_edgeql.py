# AUTOGENERATED FROM 'app/queries/unit/updateAddress.edgeql' WITH:
#     $ edgedb-py


from __future__ import annotations
import dataclasses
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        # Pydantic 2.x
        from pydantic_core.core_schema import any_schema
        return any_schema()

    @classmethod
    def __get_validators__(cls):
        # Pydantic 1.x
        from pydantic.dataclasses import dataclass as pydantic_dataclass
        _ = pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class updateAddressResult(NoPydanticValidation):
    id: uuid.UUID


async def updateAddress(
    executor: edgedb.AsyncIOExecutor,
    *,
    state: str,
    city: str,
    district: str,
    street: str,
    number: int,
    complement: str,
    postal: str,
    address_id: uuid.UUID,
) -> updateAddressResult | None:
    return await executor.query_single(
        """\
        update Address filter .id = <uuid>$address_id set {
            state := <str>$state ?? .state,
            city := <str>$city ?? .city,
            district := <str>$district ?? .district,
            street := <str>$street ?? .street,
            number := <int16>$number ?? .number,
            complement := <str>$complement ?? .complement,
            postal := <str>$postal ?? .postal
        }\
        """,
        state=state,
        city=city,
        district=district,
        street=street,
        number=number,
        complement=complement,
        postal=postal,
        address_id=address_id,
    )
